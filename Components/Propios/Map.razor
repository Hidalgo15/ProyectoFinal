@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@inject IJSRuntime JSx
@inject ContextoDige Cd

@code {
    [Parameter] public List<Multa> Multas { get; set; } = new();
    [Parameter] public bool MostrarTodasLasMultas { get; set; } = false;  // Parámetro para decidir si mostrar todas las multas

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSx.InvokeVoidAsync("CargarMapa");

            // Filtrar las multas según el parámetro MostrarTodasLasMultas
            List<Multa> multasFiltradas;

            if (MostrarTodasLasMultas)
            {
                // Mostrar todas las multas
                multasFiltradas = Multas;
            }
            else
            {
                // Filtrar las multas del agente en sesión dentro de las últimas 4 semanas
                var fechaLimite = DateTime.Now.AddDays(-28); // Últimas 4 semanas
                multasFiltradas = Multas
                    .Where(m => m.Fecha >= fechaLimite && m.Latitud != null && m.Longitud != null)
                    .ToList();
            }

            if (multasFiltradas.Any()) // Verificar si hay multas
            {
                var paramx = Newtonsoft.Json.JsonConvert.SerializeObject(multasFiltradas);
                await JSx.InvokeVoidAsync("CargarMarcadores", paramx);
            }
            else
            {
                // Si no hay multas, también se puede mostrar un mensaje o notificación
                Console.WriteLine("No hay multas para mostrar en el mapa.");
                await JSx.InvokeVoidAsync("LimpiarMarcadores");  // Limpiar los marcadores anteriores si no hay multas
            }
        }
    }
}





<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

<style>
    html,
    body {
        height: 100%;
        margin: 0;
    }

    .leaflet-container {
        height: 400px;
        width: 100%;
        max-width: 100%;
        max-height: 100%;
    }
</style>

<div id="map" style="width: 100%; height: 400px;"></div>



<script>
  var mapa = null;
var markers = []; // Array para guardar los marcadores.

CargarMapa = function () {
    mapa = L.map('map').setView([18.608288416826742, -70.2537288419647], 8);

    const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(mapa);

    function onMapClick(e) {
        popup
            .setLatLng(e.latlng)
            .setContent(`You clicked the map at ${e.latlng.toString()}`)
            .openOn(mapa);
    }

    mapa.on('click', onMapClick);
}

function LimpiarMarcadores() {
    // Eliminar todos los marcadores del mapa
    for (let i = 0; i < markers.length; i++) {
        mapa.removeLayer(markers[i]);
    }
    markers = []; // Limpiar el array de marcadores
}

function CargarMarcadores(multas) {
    if (!mapa) {
        console.error("El mapa no se ha cargado correctamente.");
        return;
    }

    // Limpiar marcadores previos antes de cargar los nuevos
    LimpiarMarcadores();

    multas = JSON.parse(multas);
    
    if (multas.length === 0) {
        console.log("No hay multas para mostrar en el mapa.");
        return; // No hacer nada si no hay multas
    }

    for (let x = 0; x < multas.length; x++) {
        let multa = multas[x];

        // Convertir las coordenadas a números
        let latitud = parseFloat(multa.Latitud);
        let longitud = parseFloat(multa.Longitud);

        // Verificar que las coordenadas sean válidas antes de añadir el marcador
        if (!isNaN(latitud) && !isNaN(longitud)) {
            // Crear el marcador en el mapa
            let marker = L.marker([latitud, longitud]).addTo(mapa);

            // Asociar el popup al marcador con el nombre de la multa
            marker.bindPopup(multa.Nombre + '<br>Descripción: ' + multa.Descripción + '<br>Fecha: ' + new Date(multa.Fecha).toLocaleDateString());

            // Agregar el marcador al array
            markers.push(marker);
        }
    }
}

</script>
